package level9

func Maximum69Number(num int) int {

	res := []int{}
	for num > 0 {
		res = append(res, num%10)
		num /= 10
	}
	max := 0
	for j := len(res) - 1; j >= 0; j-- {
		if res[j] == 6 {
			res[j] = 9
			break
		}
	}
	for i := len(res) - 1; i >= 0; i-- {
		max = max*10 + res[i]
	}
	return max
}
func ToHex(num int) string {

	res := ""
	tmp := "0123456789abcdef"

	if num == 0 {
		return "0"
	}
	if num < 0 {
		num = -num

		//1. 正常操作，先取正数，再去反码，再去补码
		//  1111 1111 1111 1111 1111 1111 1111 1111 == 2^32 - 1
		//1 0000 0000 0000 0000 0000 0000 0000 0000 == 2^32
		//1111 1111 1111 1111 1111 1111 1111 1111
		//0000 0000 0000 0000 0000 0000 0000 0010  ^,取反码
		//1111 1111 1111 1111 1111 1111 1111 1101  +1,取补码
		//1111 1111 1111 1111 1111 1111 1111 1110  得到-2的二进制表示，但是实际计算是十进制的数去算

		//2. -2 :    1000 0000 0000 0000 0000 0000 0000 0010
		//1<<32-1 :  1111 1111 1111 1111 1111 1111 1111 1111
		//         1111 1111 1111 1111 1111 1111 1111 1101  +  1
		//         1111 1111 1111 1111 1111 1111 1111 1110

		//-1 :  1111 1111 1111 1111 1111 1111 1111 1111 (-1 变为无符号十进制为 1<<32 -1,-2变为无符号十进制为 1<<32 -2 )
		//-2 :
		num ^= (1 << 32) - 1
		num += 1
	}
	for num > 0 {
		res = string(tmp[num%16]) + res
		num /= 16
	}
	return res
}
